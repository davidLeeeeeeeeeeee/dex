//类图
@startuml
class User {
  +id: int
  +name: string
  +placeOrder()
}
class Order {
  +id: int
  +total(): Money
}
class Product

User "1" --> "many" Order : places
Order "*" --> "*" Product : contains
@enduml
//对象图
@startuml
object "User u1" as u1 {
  id = 1
  name = "Alice"
}
object "Order #1001" as o1 {
  total = 99.00
}
u1 -- o1
@enduml
//组件图
@startuml
interface "REST API" as IRest
component "Auth Service" as Auth
component "User Service" as UserSvc
database "DB" as DB

IRest - Auth
Auth --> UserSvc
UserSvc --> DB
@enduml
//部署图
@startuml
node "Cloud" {
  node "K8s Node" {
    artifact "Pod: Web" as Web
    artifact "Pod: UserSvc" as US
    database "RDS" as RDS
  }
}
Web --> US : HTTP
US --> RDS : JDBC
@enduml
//包图
@startuml
package "domain" {
  class Order
  class Product
}
package "application" {
  class OrderService
}
package "infrastructure" {
  class OrderRepository
}

application ..> domain : uses
infrastructure ..> domain : persists
OrderService --> OrderRepository
@enduml
//组合结构图
@startuml
' 近似表示：组件的端口与内部部件
package "OrderProcessor (Composite)" {
  component OrderProcessor as OP
  interface InPort
  interface OutPort
  InPort -left- OP
  OP -right- OutPort

  package "Internal Parts" {
    component Parser as P
    component Validator as V
    component Repo as R
  }
  OP ..> P
  P --> V
  V --> R
}
@enduml
//轮廓结构图
@startuml
' 近似表示：用构造型（stereotype）扩展
package "MyProfile" <<profile>> {
  ' 定义两个领域构造型
  class «Entity» <<stereotype>>
  class «AggregateRoot» <<stereotype>>
}

class User <<Entity>>
class Order <<AggregateRoot>>

note right of User
  通过构造型标记领域概念
end note
@enduml
//用例图
@startuml
left to right direction
actor Customer
actor "Payment Gateway" as PG <<external>>
rectangle "Online Shop" {
  usecase "Place Order" as UC1
  usecase "Pay" as UC2
  usecase "Track Order" as UC3
}
Customer --> UC1
Customer --> UC3
UC1 --> UC2
PG <-- UC2
@enduml
//活动图
@startuml
start
:Select items;
:Fill cart;
if (In stock?) then (yes)
  :Create order;
  fork
    :Reserve inventory;
  fork again
    :Charge payment;
  end fork
  :Ship;
else (no)
  :Notify out-of-stock;
endif
stop
@enduml
//状态图
@startuml
[*] --> Idle
Idle --> Processing : submit
Processing --> Completed : success
Processing --> Failed : error / rollback()
Failed --> Idle : retry
Completed --> [*]
@enduml
//序列图
@startuml
autonumber
actor User
participant Web
participant Service
database DB

User -> Web : POST /orders
Web -> Service : createOrder(data)
Service -> DB : INSERT order
DB --> Service : ok
Service --> Web : 201 Created
Web --> User : Order ID
@enduml
//通信图
@startuml
' 近似：以对象+编号消息表达（非时间轴）
object User
object Web
object Service
object DB

' 隐藏连线用于布置布局
User -[hidden]- Web
Web -[hidden]- Service
Service -[hidden]- DB

User --> Web : [1] POST /orders
Web --> Service : [2] createOrder()
Service --> DB : [3] insert()
DB --> Service : [4] ok
Service --> Web : [5] 201
Web --> User : [6] Order ID
@enduml
//交互概览图
@startuml
' 近似：用活动图编排多个交互（用“ref: …”标注）
start
:ref: Sequence(Login);
if (Payment path?) then (Card)
  :ref: Sequence(Pay by Card);
else (Wallet)
  :ref: Sequence(Pay by Wallet);
endif
:ref: Sequence(Notify);
stop
@enduml
//时间图
@startuml
' Timing Diagram
robust "Client" as C
concise "Server" as S

@0
C is Idle
S is Idle
@10
C is Sending
S is Busy
@25
C is Waiting
S is Busy
@40
C is Idle
S is Idle
@enduml
